How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It throw out the non-matching lines in seconds :D

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    In case anything goes wrong, we would have old things to look back at.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Committing manually could be forgotten and so the changes may be lost
    or the changes could be too big if we forget about the one logic per
    commit guide line. Whereas automatical saves would guarantee the
    persistance of most changes, it might happen that an autosave commits
    only half of the actual solution which is against the code of conduct.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because changes in one file may need other changes in other files. So, by
    allowing multiple file savings in one commit, we actually save the whole
    change in one group and not only parts of it in different commits.

How can you use the commands git log and git diff to view the history of files?

    git log will show the commit history and in case we would like to view
    changes between two commits, we can use git diff with the commit ids to
    list added and removed lines.

How might using version control make you more confident to make changes that
could break something?

    If anything breaks, just get back to the old version and start over again.
    Or kust make a compare with the version from before any bug and look for
    a possible cause. 

Now that you have your workspace set up, what do you want to try using Git for?

    I'll figure out in a while.
