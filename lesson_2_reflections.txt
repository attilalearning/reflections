What happens when you initialize a repository? Why do you need to do it?

    When we initialize a repository, git will make a "hidden" or special
    folder in which it will hold and manage the changes among the files
    that are and will be committed. It is necessary to initialize the
    repository when we want to create a new one.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

    The staging area seems to be a "place" where files are remembered
    or recorded for the next commit.

How can you use the staging area to make sure you have one commit per
logical change?

    We can use git diff --staged to compare the files added to the
    staging area with the latest commit in the repository to observe
    the changes that are about to be committed. If there are more
    logical changes, we only add the files that connect to one logical
    change to the staging area and then do a commit and repeat this
    process per each logical change until we've committed all the
    changes we have made.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

    Branches are useful when we need to create more versions of the
    same branch (ex, translate to a different language, change logic
    or try a new idea). This was we will be able to have multiple
    versions in parallel to the main project, neatly organized and
    easy to access.

How do the diagrams help you visualize the branch structure?

    The diagrams help by showing the master node along with the other
    feature or experimentals being developed at the same time. By the
    diagram we can track down the parent of each node on the
    branches as well as each parent node of a branch.

